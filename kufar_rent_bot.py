import asyncio
import json

import time
from datetime import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from telebot import types
from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State

from main1 import refresh_list
from keyboards import room_kbrd, period_kbrd, reset_kbrd

storage = MemoryStorage()
token = '6121619731:AAH6AsrTl-R346pGKctHyCwsARto2Gaz3Ow'
bot = Bot(token=token)
dp = Dispatcher(bot, storage=storage)

stop_iteration = False


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


class RentGroup(StatesGroup):
    room_count = State()
    period = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç.", reply_markup=room_kbrd)


@dp.message_handler(Text("–û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"))
async def reset(message: types.Message):
    await message.answer("–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç.",
                         reply_markup=room_kbrd)


@dp.message_handler(
    lambda message: message.text in ["1 –∫–æ–º–Ω–∞—Ç–∞", "2 –∫–æ–º–Ω–∞—Ç—ã", "3 –∫–æ–º–Ω–∞—Ç—ã", "4 –∫–æ–º–Ω–∞—Ç—ã", "5 –∏ –±–æ–ª–µ–µ", "–í—Å–µ"])
async def choose_quant(message: types.Message, state: FSMContext):
    if message.text == "–í—Å–µ":
        room_count = None
    else:
        room_count = message.text.split()[0]
    await RentGroup.room_count.set()
    await state.update_data(room_count=room_count)
    await message.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π?',
                         reply_markup=period_kbrd)
    await RentGroup.next()


@dp.message_handler(Text(startswith="1/"), state=RentGroup.period)
async def flat_list(message: types.Message, state: FSMContext):
    periods = {"1/30 –º–∏–Ω": 30, "1/1 —á–∞—Å": 60, "1/2 —á–∞—Å–∞": 120}
    if message.text in periods:
        period = periods[message.text]
        await state.update_data(period=period)
        data = await state.get_data()
        r_count = data['room_count']
        await state.finish()
        while True:
            now = datetime.now()
            if now.hour > 9:
                refresh_list(r_count=r_count)
                await send_data(message)
            else:
                pass
            time.sleep(period * 60)


@dp.message_handler(Text('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'))
async def stop_signal(message):
    global stop_iteration
    stop_iteration = True


async def send_data(message):
    with open('flats.json', encoding='utf-8') as file:
        fl_list = json.load(file)
    for i in fl_list:
        time.sleep(4)
        photos = i['photos']
        media = [types.InputMediaPhoto(photo) for photo in photos]
        try:
            await  bot.send_media_group(chat_id=message.chat.id, media=media)
        except Exception as ex:
            print(ex)
            await bot.send_message(message.chat.id,
                                   "–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ..")
        if 'description' in i.keys():
            await bot.send_message(message.chat.id, f"<a href='{i['link']}'>"
                                                    f"üè†<b>{i['apartment']}</b>\n"
                                                    f"üíµ<i>{i['price']}</i>\n"
                                                    f"üìç{i['address']}\n"
                                                    f"\n"
                                                    f"üí¨<i>{i['description']}</i>"
                                                    f"</a>", parse_mode='html',
                                   reply_markup=reset_kbrd)
        else:
            await bot.send_message(message.chat.id, f"<a href='{i['link']}'>"
                                                    f"üè†<b>{i['apartment']}</b>\n"
                                                    f"üíµ<i>{i['price']}</i>\n"
                                                    f"üìç{i['address']}\n"
                                                    f"</a>", parse_mode='html',
                                   reply_markup=reset_kbrd)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
